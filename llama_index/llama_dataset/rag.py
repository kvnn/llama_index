"""Llama Dataset Class."""

from dataclasses import dataclass
from typing import List

from pandas import DataFrame as PandasDataFrame

from llama_index.core import BaseQueryEngine
from llama_index.llama_dataset.base import (
    BaseLlamaDataExample,
    BaseLlamaDataset,
    BaseLlamaExamplePrediction,
    BaseLlamaPredictionDataset,
    CreatedByType,
)


@dataclass(repr=True)
class RagExamplePrediction(BaseLlamaExamplePrediction):
    """RAG example prediction class.

    Args:
        response: str
        contexts: List[str]
    """

    response: str
    contexts: List[str]

    @property
    def class_name(self) -> str:
        """Data example class name."""
        return "LlamaRagDataExample"


@dataclass(repr=True)
class LabelledRagDataExample(BaseLlamaDataExample):
    """RAG example class. Analogous to traditional ML datasets, this dataset contains
    the "features" (i.e., query + context) to make a prediction and the "label" (i.e., response)
    to evaluate the prediction.

    Args:
        query (str): The user query
        kind (LlamaRagDataExampleKind): The example is generated by human or ai
        reference_contexts (List[str] or List[TextNode]): The contexts used for response
        reference_answer ([str]): Reference answer to the query. An answer
                                    that would receive full marks upon evaluation.
    """

    query: str
    query_by: CreatedByType
    reference_contexts: List[str]
    reference_answer: str
    reference_answer_by: CreatedByType

    @property
    def class_name(self) -> str:
        """Data example class name."""
        return "LlamaRagDataExample"


class RagPredictionDataset(BaseLlamaPredictionDataset):
    """RagDataset class."""

    _prediction_type = RagExamplePrediction

    def to_pandas(self) -> PandasDataFrame:
        """Create pandas dataframe."""
        data = {
            "response": [t.response for t in self.predictions],
            "contexts": [t.contexts for t in self.predictions],
        }

        return PandasDataFrame(data)


class LabelledRagDataset(BaseLlamaDataset):
    """RagDataset class."""

    _example_type = LabelledRagDataExample

    def to_pandas(self) -> PandasDataFrame:
        """Create pandas dataframe."""
        data = {
            "query": [t.query for t in self.examples],
            "reference_contexts": [t.reference_contexts for t in self.examples],
            "reference_answer": [t.reference_answer for t in self.examples],
            "reference_answer_by": [str(t.reference_answer_by) for t in self.examples],
            "query_by": [str(t.query_by) for t in self.examples],
        }

        return PandasDataFrame(data)

    async def _apredict_example(
        self,
        query_engine: BaseQueryEngine,
        example: LabelledRagDataExample,
    ) -> RagExamplePrediction:
        """Predict RAG example with a query engine."""
        response = await query_engine.aquery(example.query)
        return RagExamplePrediction(
            response=response.response, contexts=[s.text for s in response.source_nodes]
        )

    def _construct_prediction_dataset(self, predictions) -> RagPredictionDataset:
        """Construct prediction dataset."""
        return RagPredictionDataset(predictions=predictions)
